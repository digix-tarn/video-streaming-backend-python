from fastapi import APIRouter, Request
import json
from pywebpush import webpush, WebPushException

from config import DevelopmentConfig
config = DevelopmentConfig()

push_router = APIRouter()

subscriptions = []  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß, ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô DB

VAPID_PUBLIC_KEY = config.PUSH_PUB_KEY  # ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå
VAPID_PRIVATE_KEY = config.PUSH_PRI_KEY     # ‡∏à‡∏≤‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå

@push_router.post("/save-subscription")
async def save_subscription(request: Request):
    body = await request.json()
    subscriptions.append(body)
    return {"status": "saved"}

@push_router.post("/send-notification")
def send_notification():
    for sub in subscriptions:
        try:
            webpush(
                subscription_info=sub,
                data=json.dumps({
                    "title": "üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
                    "body": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å FastAPI!"
                }),
                vapid_private_key=VAPID_PRIVATE_KEY,
                vapid_claims={
                    "sub": "mailto:you@example.com"
                }
            )
        except WebPushException as ex:
            print(f"‚ùå Push failed: {ex}")
    return {"status": "sent"}

@push_router.get("/public-key")
def get_public_key():
    return {"publicKey": VAPID_PUBLIC_KEY}
